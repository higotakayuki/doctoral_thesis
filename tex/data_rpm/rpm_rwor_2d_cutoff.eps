%!PS-Adobe-2.0 EPSF-2.0
%%Title: rpm_rwor_2d_cutoff.eps
%%Creator: gnuplot 4.0 patchlevel 0-0vl1
%%CreationDate: Wed Nov  7 21:41:08 2007
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -93 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 280 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
1428 840 M
5296 0 V
1.000 UL
LTb
1428 840 M
63 0 V
5233 0 R
-63 0 V
stroke
1260 840 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (-800)]
] -93.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1428 2128 M
5296 0 V
1.000 UL
LTb
1428 2128 M
63 0 V
5233 0 R
-63 0 V
stroke
1260 2128 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (-700)]
] -93.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1428 3416 M
5296 0 V
1.000 UL
LTb
1428 3416 M
63 0 V
5233 0 R
-63 0 V
stroke
1260 3416 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (-600)]
] -93.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1428 4704 M
5296 0 V
1.000 UL
LTb
1428 4704 M
63 0 V
5233 0 R
-63 0 V
stroke
1260 4704 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (-500)]
] -93.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1428 840 M
0 3864 V
1.000 UL
LTb
1428 840 M
0 63 V
0 3801 R
0 -63 V
stroke
1428 560 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (10)]
[(Helvetica) 224.0 140.0 true true 0 (3)]
] -121.3 MCshow
grestore
1.000 UL
LTb
1886 840 M
0 31 V
0 3833 R
0 -31 V
2493 840 M
0 31 V
0 3833 R
0 -31 V
2803 840 M
0 31 V
0 3833 R
0 -31 V
1.000 UL
LTa
2951 840 M
0 3864 V
1.000 UL
LTb
2951 840 M
0 63 V
0 3801 R
0 -63 V
stroke
2951 560 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (10)]
[(Helvetica) 224.0 140.0 true true 0 (4)]
] -121.3 MCshow
grestore
1.000 UL
LTb
3410 840 M
0 31 V
0 3833 R
0 -31 V
4016 840 M
0 31 V
0 3833 R
0 -31 V
4327 840 M
0 31 V
0 3833 R
0 -31 V
1.000 UL
LTa
4474 840 M
0 3864 V
1.000 UL
LTb
4474 840 M
0 63 V
0 3801 R
0 -63 V
stroke
4474 560 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (10)]
[(Helvetica) 224.0 140.0 true true 0 (5)]
] -121.3 MCshow
grestore
1.000 UL
LTb
4933 840 M
0 31 V
0 3833 R
0 -31 V
5539 840 M
0 31 V
0 3833 R
0 -31 V
5850 840 M
0 31 V
0 3833 R
0 -31 V
1.000 UL
LTa
5997 840 M
0 2681 V
0 1120 R
0 63 V
1.000 UL
LTb
5997 840 M
0 63 V
0 3801 R
0 -63 V
stroke
5997 560 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (10)]
[(Helvetica) 224.0 140.0 true true 0 (6)]
] -121.3 MCshow
grestore
1.000 UL
LTb
6456 840 M
0 31 V
0 3833 R
0 -31 V
1.000 UL
LTb
1428 840 M
5296 0 V
0 3864 V
-5296 0 V
0 -3864 V
LTb
280 2772 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 280.0 0.0 true true 0 (function value)]
] -93.3 MCshow
grestore
grestore
LTb
4076 140 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (evaluations)]
] -93.3 MCshow
grestore
2.000 UP
2.000 UP
1.000 UL
LT2
LTb
5422 4501 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (0.01)]
] -93.3 MRshow
grestore
LT2
5590 4501 M
798 0 V
-798 31 R
0 -62 V
798 62 R
0 -62 V
3861 1625 M
0 368 V
-31 -368 R
62 0 V
-62 368 R
62 0 V
5027 1482 M
0 292 V
-31 -292 R
62 0 V
-62 292 R
62 0 V
473 -396 R
0 227 V
-31 -227 R
62 0 V
-62 227 R
62 0 V
548 -495 R
0 326 V
-31 -326 R
62 0 V
-62 326 R
62 0 V
223 -23 R
0 163 V
-31 -163 R
62 0 V
-62 163 R
62 0 V
201 -446 R
0 409 V
-31 -409 R
62 0 V
-62 409 R
62 0 V
75 -435 R
0 466 V
-31 -466 R
62 0 V
-62 466 R
62 0 V
3861 1809 BoxF
5027 1628 BoxF
5531 1492 BoxF
6110 1273 BoxF
6364 1494 BoxF
6596 1335 BoxF
6702 1337 BoxF
5989 4501 BoxF
2.000 UP
1.000 UL
LT2
LTb
5422 4221 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (0.05)]
] -93.3 MRshow
grestore
LT2
5590 4221 M
798 0 V
-798 31 R
0 -62 V
798 62 R
0 -62 V
2697 2622 M
0 501 V
-31 -501 R
62 0 V
-62 501 R
62 0 V
3977 1517 M
0 588 V
-31 -588 R
62 0 V
-62 588 R
62 0 V
511 -583 R
0 454 V
-31 -454 R
62 0 V
-62 454 R
62 0 V
470 -574 R
0 458 V
-31 -458 R
62 0 V
-62 458 R
62 0 V
258 -296 R
0 258 V
-31 -258 R
62 0 V
-62 258 R
62 0 V
230 -518 R
0 345 V
-31 -345 R
62 0 V
-62 345 R
62 0 V
159 -473 R
0 446 V
-31 -446 R
62 0 V
-62 446 R
62 0 V
2697 2872 Circle
3977 1811 Circle
4519 1749 Circle
5020 1631 Circle
5309 1693 Circle
5570 1476 Circle
5760 1399 Circle
5989 4221 Circle
2.000 UP
1.000 UL
LT2
LTb
5422 3941 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (0.1)]
] -93.3 MRshow
grestore
LT2
5590 3941 M
798 0 V
-798 31 R
0 -62 V
798 62 R
0 -62 V
2014 3670 M
0 1034 V
1983 3670 M
62 0 V
-62 1034 R
62 0 V
3423 2252 M
0 757 V
-31 -757 R
62 0 V
-62 757 R
62 0 V
481 -976 R
0 1045 V
3904 2033 M
62 0 V
-62 1045 R
62 0 V
4515 1818 M
0 347 V
-31 -347 R
62 0 V
-62 347 R
62 0 V
252 -501 R
0 480 V
-31 -480 R
62 0 V
-62 480 R
62 0 V
208 -415 R
0 293 V
-31 -293 R
62 0 V
-62 293 R
62 0 V
140 -454 R
0 466 V
-31 -466 R
62 0 V
-62 466 R
62 0 V
2014 4294 Box
3423 2630 Box
3935 2556 Box
4515 1991 Box
4798 1904 Box
5037 1876 Box
5208 1801 Box
5989 3941 Box
2.000 UP
1.000 UL
LT2
LTb
5422 3661 M
gsave 0 setgray
[ [(Helvetica) 280.0 0.0 true true 0 (0.2)]
] -93.3 MRshow
grestore
LT2
5590 3661 M
798 0 V
-798 31 R
0 -62 V
798 62 R
0 -62 V
1606 4259 M
0 445 V
-31 -445 R
62 0 V
-62 445 R
62 0 V
2777 3237 M
0 678 V
-31 -678 R
62 0 V
-62 678 R
62 0 V
556 -940 R
0 583 V
-31 -583 R
62 0 V
-62 583 R
62 0 V
446 -967 R
0 1176 V
3810 2591 M
62 0 V
-62 1176 R
62 0 V
4142 2681 M
0 826 V
-31 -826 R
62 0 V
-62 826 R
62 0 V
195 -896 R
0 523 V
-31 -523 R
62 0 V
-62 523 R
62 0 V
102 -687 R
0 1211 V
4470 2447 M
62 0 V
-62 1211 R
62 0 V
1606 4665 CircleF
2777 3576 CircleF
3364 3267 CircleF
3841 3179 CircleF
4142 3094 CircleF
4368 2872 CircleF
4501 3053 CircleF
5989 3661 CircleF
1.000 UL
LTb
1428 840 M
5296 0 V
0 3864 V
-5296 0 V
0 -3864 V
2.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
